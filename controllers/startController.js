const { startYtDlpProcess } = require('../utils/ytDlpHelper')
const ffmpeg = require('fluent-ffmpeg')
const ffmpegConfig = require('../config/ffmpegConfig')
const path = require('path')
const {
  setStreamProcess,
  setYtProcess,
  getStreamProcess,
} = require('../utils/processManager')

const { rtmpsUrl } = require('../utils/readJSON')

const logoPath = path.join(__dirname, '../logo.png')
// const rtmpsUrl = process.env.RTMPS_URL

exports.startStream = (req, res, next) => {
  const videoUrl = req.videoUrl
  const startTime = req.startTime // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤–∏–¥–µ–æ

  if (!videoUrl) {
    return res.status(400).send('‚ùó –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ')
  }
  if (getStreamProcess()) {
    return res.send('‚ùó –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞')
  }
  console.log(`üîó –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ: ${videoUrl}`)

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å yt-dlp –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
  ytProcess = startYtDlpProcess(videoUrl, startTime)
  setYtProcess(ytProcess)
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π yt-dlp
  ytProcess.on('exit', (code, signal) => {
    console.log(`‚ùå yt-dlp: exit —Å –∫–æ–¥–æ–º ${code} –∏ —Å–∏–≥–Ω–∞–ª–æ–º ${signal}`)
    setYtProcess(null)
  })

  ytProcess.on('close', (code, signal) => {
    console.log(`üÜó yt-dlp: close —Å –∫–æ–¥–æ–º ${code} –∏ —Å–∏–≥–Ω–∞–ª–æ–º ${signal}`)
    setYtProcess(null)
  })

  ytProcess.stdout.once('data', () => {
    console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞—á–∞–ª–∞—Å—å')
  })

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∏–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
  // streamLogoProcess = ffmpeg()
  //   .input(logoPath)
  //   .inputOptions(['-loop 1', '-re']) // –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
  //   .outputOptions(ffmpegConfig)
  //   .output(rtmpsUrl)
  //   .on('start', () => {
  //     console.log('‚úÖ –°—Ç—Ä–∏–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∑–∞–ø—É—â–µ–Ω')
  //
  //   })
  //   .on('error', (err) => {
  //     console.error('‚ùå ffmpeg:', err.message)
  //   })
  //   .on('end', () => {
  //     console.log('‚èπÔ∏è –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
  //   })
  //   .on('stderr', (stderr) => {
  //     console.log('stderr:', stderr) // –í—ã–≤–æ–¥ stderr –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  //   })
  //   .run()

  // –ö–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–¥–µ–æ –Ω–∞—á–∏–Ω–∞—é—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∏–º —Å –≤–∏–¥–µ–æ
  // ytProcess.stdout.once('data', () => {
  //   console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞—á–∞–ª–∞—Å—å, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∏–º —Å –≤–∏–¥–µ–æ')
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∏–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
  //   if (streamLogoProcess) {
  //     streamLogoProcess.kill('SIGKILL') // –ú—è–≥–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

  //   }

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∏–º —Å –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
  streamProcess = ffmpeg(ytProcess.stdout)
    .inputOptions(['-re'])
    .outputOptions(ffmpegConfig)
    .output(rtmpsUrl)
    .on('start', () => {
      res.send('‚úÖ –°—Ç—Ä–∏–º –∑–∞–ø—É—â–µ–Ω')
      console.log('‚úÖ –°—Ç—Ä–∏–º –∑–∞–ø—É—â–µ–Ω')
    })
    .on('error', (err) => {
      console.error('‚ùå ffmpeg:', err.message)
      setStreamProcess(null)
      setYtProcess(null) // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º yt-dlp, –µ—Å–ª–∏ ffmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π
    })
    .on('end', () => {
      console.log('üÜó –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
      setStreamProcess(null)
      setYtProcess(null) // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º yt-dlp, –µ—Å–ª–∏ ffmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π
    })
    .once('progress', (progress) => {
      console.log('‚úÖ –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å')
    })
    .run()

  setStreamProcess(streamProcess)
}
