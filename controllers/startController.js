const { startYtDlpProcess } = require('../utils/ytDlpHelper')
const ffmpeg = require('fluent-ffmpeg')
const ffmpegConfig = require('../config/ffmpegConfig')
const path = require('path')
const {
  setStreamProcess,
  setYtProcess,
  getStreamProcess,
  getYtProcess,
} = require('../utils/processManager')
const { start } = require('repl')

let streamLogoProcess = null
let streamProcess = getStreamProcess()
let ytProcess = getYtProcess()

const watermarkPath = path.join(__dirname, '../watermark.png')
const logoPath = path.join(__dirname, '../logo.png')
const rtmpsUrl = process.env.RTMPS_URL

exports.startStream = (req, res, next) => {
  const videoUrl = req.videoUrl
  const startTime = req.startTime //–¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤–∏–¥–µ–æ
  console.log('startTime:', startTime)

  if (!videoUrl) {
    return res.status(400).send('‚ùó –£–∫–∞–∂–∏—Ç–µ –ø–æ—Å–ª–µ ?url= —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ')
  }
  if (streamProcess) {
    return res.send('‚ùó –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞')
  }

  console.log(`üîó –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ: ${videoUrl}`)

  //* –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
  //* –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∏–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–µ—Ä–µ–¥ –∏–ª–∏ –≤–º–µ—Å—Ç–æ –≤–∏–¥–µ–æ
  //* –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ watermark —Å–Ω–∏–∑—É –∫–æ–¥ - —Å–Ω–∏–∑—É –∫–æ–¥

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ yt-dlp –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ ffmpeg
  ytProcess = startYtDlpProcess(videoUrl, startTime)

  ytProcess.on('exit', (code, signal) => {
    console.log(`‚ùå yt-dlp: exit`)
    //–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä–µ—à–Ω–∏–∏ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
  })
  ytProcess.on('close', (code, signal) => {
    console.log(`üÜó yt-dlp: close`)
    //–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä–µ—à–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
  })
  //*  ytProcess.stdout.once –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑
  ytProcess.stdout.once('data', (data) => {
    console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...')
  })
  streamLogoProcess = ffmpeg()
    .input(logoPath)
    .inputOptions(['-loop 1']) // –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    .outputOptions(ffmpegConfig)
    .output(rtmpsUrl)
    .on('start', () => {
      console.log('‚úÖ –°—Ç—Ä–∏–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∑–∞–ø—É—â–µ–Ω')
    })
    .on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ ffmpeg:', err.message)
      streamProcess = null
    })
    .on('end', () => {
      console.log('‚èπÔ∏è –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
      streamProcess = null
    })
    .on('stderr', (stderr) => {
      console.log('stderr:', stderr) // –í—ã–≤–æ–¥ stderr –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    })
    .run()

  streamProcess = ffmpeg(ytProcess.stdout)
    .inputOptions('-re')
    .outputOptions(ffmpegConfig)
    .output(rtmpsUrl)
    .on('start', () => {
      res.send('‚úÖ –°—Ç—Ä–∏–º –∑–∞–ø—É—â–µ–Ω')
      console.log('‚úÖ –°—Ç—Ä–∏–º –∑–∞–ø—É—â–µ–Ω')
    })
    .on('error', (err) => {
      console.error('‚ùå ffmpeg:', err.message)
      streamProcess = null
      ytProcess = null
    })
    .on('end', () => {
      console.log('üÜó –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
      streamProcess = null
      ytProcess = null
    })
    // .on('stderr', (stderr) => {
    //   console.log('stderr:', stderr) // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
    // })
    .once('progress', (progress) => {
      console.log('‚úÖ –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å')
      streamLogoProcess.kill('SIGINT')
    })
    .run()

  setYtProcess(ytProcess)
  setStreamProcess(streamProcess)
}
