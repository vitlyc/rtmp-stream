const TelegramBot = require('node-telegram-bot-api')
const fetch = require('node-fetch')
const fs = require('fs')
const path = '../userdata.json'
// –¢–æ–∫–µ–Ω  –±–æ—Ç–∞
const token = '7848450425:AAG1N4hrc7xHX9U-KQmq1tAPd915_43kdB0'

const bot = new TelegramBot(token, { polling: true })
const PORT = 3000
const URL = `http://localhost:${PORT}`
const MY_ID = 125897751
//–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞
const commands = [
  {
    command: 'start',
    description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞',
  },
  {
    command: 'stop',
    description: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∏–º',
  },
]
bot.setMyCommands(commands)

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userData = {}
// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id

  if (msg.from.id != MY_ID) return

  bot
    .sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –ø–æ—Ç–æ–∫–æ–≤—É—é —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é.')
    .then(() => {
      startConfigFlow(chatId)
    })
})
// –ö–æ–º–∞–Ω–¥–∞ /stop
bot.onText(/\/stop/, async (msg) => {
  const chatId = msg.chat.id

  // –û—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∏–º–∞
  try {
    const response = await fetch(`${URL}/stop`)
    const data = await response.text()
    bot.sendMessage(chatId, data)
  } catch (error) {
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç—Ä–∏–º–∞: ' + error.message)
  }
})

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
function startConfigFlow(chatId) {
  userData[chatId] = {
    step: 'awaitingServerUrl',
    serverUrl: null,
    streamKey: null,
  }
  bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ server URL:')
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function saveUserData(data) {
  fs.writeFileSync(path, JSON.stringify(data, null, 2))
}
async function startStream(url, chatId) {
  console.log('–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∏–º–∞ —Å URL:', url)
  try {
    const response = await fetch(`${URL}/stream?url=${url}`)
    const data = await response.text()
    bot.sendMessage(chatId, data)
  } catch (error) {
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ç—Ä–∏–º–∞: ' + error.message)
  }
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id
  const text = msg.text.trim()

  if (/https?:\/\/(www\.)?(youtube\.com\/watch\?v=|youtu\.be\/)/.test(text)) {
    return startStream(text, chatId)
  }

  if (!userData[chatId]) return

  if (userData[chatId].step === 'awaitingServerUrl') {
    userData[chatId].serverUrl = text
    userData[chatId].step = 'awaitingStreamKey'
    bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ stream key:')
  } else if (userData[chatId].step === 'awaitingStreamKey') {
    userData[chatId].streamKey = text
    userData[chatId].step = ''
    bot.sendMessage(chatId, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ')
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –Ω–∞—Å—Ç—Ä–æ–∏–ª:
      Server URL: ${userData[chatId].serverUrl}
      Stream Key: ${userData[chatId].streamKey}`)

    saveUserData(userData[chatId])
    delete userData[chatId]
  }
})
